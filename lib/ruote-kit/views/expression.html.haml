
- # under the MIT license, see LICENSE.txt

- @_uses_fluo = true

%h1
  expression
  = @expression.fei.sid

%canvas#fluo

%form{ :method => 'POST', :enctype => 'multipart/form-data', :accept_charset => 'UTF-8' }

  %input#_method{ :type => 'hidden', :name => '_method', :value => 'DELETE' }
  %input{ :type => 'hidden', :name => '_snowman', :value => '&#9731;' }

  %table.details

    %tr
      %td
        fei
      %td
        &= @expression.fei.sid
    %tr
      %td
        expid
      %td
        &= @expression.fei.expid
    %tr
      %td
        expression
      %td
        &= @expression.tree.first
    %tr
      %td
        expression class
      %td
        &= @expression.class.to_s
    - if @expression.original_tree != @expression.tree
      %tr
        %td
          original tree
        %td
          - ruby = Ruote::Reader.to_ruby(@expression.original_tree)
          - rubyline = ruby.split("\n").first
          - json = Rufus::Json.pretty_encode(@expression.original_tree)
          %pre.pdef{ :onclick => 'Rk.toggleNext(this);' } #{rubyline}
          %pre.pdef{ :onclick => 'Rk.toggleNext(this);', :style => 'display: none;' } #{ruby}
          %pre.pdef{ :onclick => 'Rk.toggleNext(this);', :style => 'display: none;' } #{json}
    %tr
      %td
        tree
      %td
        - ruby = Ruote::Reader.to_ruby(@expression.tree)
        - rubyline = ruby.split("\n").first
        - json = Rufus::Json.pretty_encode(@expression.tree)
        %pre.pdef{ :onclick => 'Rk.toggleNext(this);' } #{rubyline}
        %pre.pdef{ :onclick => 'Rk.toggleNext(this);', :style => 'display: none;' } #{ruby}
        %pre.pdef{ :onclick => 'Rk.toggleNext(this);', :style => 'display: none;' } #{json}

    - if sched = @process.schedules.find { |s| s['owner'] == @expression.fei }
      %tr
        %td
          schedule
        %td
          &= sched['type']
          - if sched['at']
            at
            = Time.parse(sched['at']).localtime.strftime('%Y/%m/%d %H:%M:%S')
    %tr
      %td.no_border{ :colspan => 2 }
        &nbsp;

    %tr
      %td
        process
      %td
        GET
        = alink(:processes, @expression.fei.wfid)
    %tr
      %td
        other expressions
      %td
        GET
        = alink(:expressions, @expression.fei.wfid)
    %tr
      %td
        stored workitem
      %td
        - if workitem = @process.stored_workitems.find { |wi| wi.fei == @expression.fei }
          GET
          = alink(:workitems, @expression.fei.sid)

    %tr
      %td.no_border{ :colspan => 2 }
        &nbsp;

    %tr
      %td
        cancel
      %td
        %input{ :type => 'submit', :value => 'cancel', :onclick => 'return confirm("really ?");' }
        %span.description DELETE /_ruote/expressions/#{@expression.fei.sid}
    %tr
      %td
        kill
      %td
        -#%input{ :type => 'hidden', :name => '_kill', :value => '1' }
        %input{ :type => 'submit', :value => 'kill', :onclick => 'return confirm("really ?");' }
        %span.description DELETE /_ruote/expressions/#{@expression.fei.sid}?_kill=1

    %tr
      %td.no_border{ :colspan => 2 }
        &nbsp;

    %tr{ :style => 'cursor: pointer;', :onclick => 'showReApply(this);' }
      %td{ :colspan => 2 }
        re-apply
    %tr.re_apply
      %td
        fields
      %td.no_padding
        - fields = @expression.h.applied_workitem['fields']
        - fields.delete('params')
        %textarea{ :name => 'fields', :cols => 70, :rows => 7 } #{Rufus::Json.pretty_encode(fields)}
    %tr.re_apply
      %td
        tree
        %a.ruote_button.ruote_go_button{ :title => 'open process definition editor', :href => '', :onclick => 'showEditor(); return false;' }
      %td.no_padding
        - tree = @expression.tree
        - tree = Rufus::Json.pretty_encode(tree)
        - rows = tree.split("\n").size
        %textarea#tree{ :name => 'tree', :cols => 70, :rows => rows } #{tree}
    %tr.re_apply
      %td
      %td
        -#%input{ :type => 'hidden', :name => '_method', :value => 'PUT' }
        %input{ :type => 'submit', :value => 're-apply', :onclick => 'return confirmReApply();' }
        %span.description PUT /_ruote/expressions/#{@expression.fei.sid}


:javascript

  var proc_rep = #{process_tree(@process)};
  Fluo.renderFlow('fluo', proc_rep);
  Fluo.crop('fluo');
  Fluo.highlight('fluo', '#{@expression.fei.expid}');
  Fluo.resizeForMaxWidth('fluo', $('body').width() / 2.1);

  $('.re_apply').hide();

  function showReApply (elt) {
    $(elt).hide();
    $('.re_apply').show();
  }

  function confirmReApply () {

    var r = confirm('really ?');
    if (r) $('#_method')[0].value = 'PUT';

    return r;
  }

  var tree = #{Rufus::Json.encode(@expression.tree)};

= haml :_tree_editor, :layout => false

